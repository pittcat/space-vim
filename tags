!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/bffbf463/
$LANG	layers/+misc/chinese/config.vim	/^  let $LANG = 'zh_CN.UTF-8'$/;"	v
$LANG	layers/+tools/fzf/config.vim	/^  let $LANG = 'en_US'$/;"	v
+	layers/+distributions/better-defaults/config.vim	/^  noremap + :Bigger<CR>$/;"	m
-	layers/+distributions/better-defaults/config.vim	/^  noremap - :Smaller<CR>$/;"	m
.	layers/+tools/tools-better/config.vim	/^  vnoremap . :normal .<CR>$/;"	m
<A-BS>	layers/+programming/self-map/config.vim	/^imap <A-BS> <C-W>$/;"	m
<C-Down>	layers/+tools/tools-better/config.vim	/^  nnoremap <silent> <C-Down> :call smooth_scroll#down(&scroll, 0, 2)<CR>$/;"	m
<C-Tab>	layers/+distributions/better-defaults/keybindings.vim	/^imap   <C-Tab>  <C-O>:tabnext<CR>$/;"	m
<C-Tab>	layers/+distributions/better-defaults/keybindings.vim	/^map    <C-Tab>  :tabnext<CR>$/;"	m
<C-Up>	layers/+tools/tools-better/config.vim	/^  nnoremap <silent> <C-Up> :call smooth_scroll#up(&scroll, 0, 2)<CR>$/;"	m
<C-g>	layers/+completion/autocomplete/config.vim	/^  inoremap <expr><C-g>     deoplete#undo_completion()$/;"	m
<C-h>	layers/+completion/autocomplete/config.vim	/^  inoremap <expr><C-h> deoplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-l>	layers/+completion/autocomplete/config.vim	/^  inoremap <expr><C-l>     deoplete#refresh()$/;"	m
<C-v>	layers/+programming/self-map/config.vim	/^inoremap  <C-v> <esc>gUiwea$/;"	m
<CR>	core/ftplugin/qf.vim	/^nnoremap <buffer> <CR> <CR>$/;"	m
<CR>	layers/+programming/codesnippets/config.vim	/^  inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\\<CR>"$/;"	m
<F1>	layers/+tools/lspc/config.vim	/^nnoremap <silent> <F1> :call LanguageClient_contextMenu()<CR>$/;"	m
<F2>	layers/+tools/tools-better/packages.vim	/^  nnoremap <F2> :MundoToggle<CR>$/;"	m
<F3>	layers/+programming/codeformat/config.vim	/^nnoremap <F3> :Neoformat<cr>$/;"	m
<F4>	layers/+tools/file-manager/config.vim	/^  inoremap <silent> <F4> <ESC>:NERDTreeToggle<CR>$/;"	m
<F4>	layers/+tools/file-manager/config.vim	/^  nnoremap <silent> <F4> :NERDTreeToggle<CR>$/;"	m
<F5>	layers/+programming/programming/config.vim	/^  nnoremap <F5> :call spacevim#plug#asyncrun#CompileAndRun()<CR>$/;"	m
<F6>	layers/+programming/moe-tagbar/config.vim	/^inoremap <F6> <ESC>:TagbarToggle<CR>$/;"	m
<F6>	layers/+programming/moe-tagbar/config.vim	/^nnoremap <F6> :TagbarToggle<CR>$/;"	m
<F7>	layers/+tools/tools-better/packages.vim	/^  nnoremap <silent> <F7> :TMToggle<cr>$/;"	m
<F8>	layers/+programming/programming/config.vim	/^  noremap <F8> :call asyncrun#quickfix_toggle(14)<cr>$/;"	m
<F9>	layers/+programming/programming/config.vim	/^  nnoremap <F9> :AsyncStop<cr>$/;"	m
<Leader>;;	layers/+programming/editing/config.vim	/^  nmap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader>;;	layers/+programming/editing/config.vim	/^  omap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader>;;	layers/+programming/editing/config.vim	/^  vmap <Leader>;; <Plug>NERDCommenterToggle$/;"	m
<Leader><Leader>	layers/+vim/better-motion/config.vim	/^map <Leader><Leader> <Plug>(easymotion-prefix)$/;"	m
<Leader>?	layers/+tools/fzf/config.vim	/^  nmap <Leader>? <plug>(fzf-maps-n)$/;"	m
<Leader>?	layers/+tools/fzf/config.vim	/^  omap <Leader>? <plug>(fzf-maps-o)$/;"	m
<Leader>?	layers/+tools/fzf/config.vim	/^  xmap <Leader>? <plug>(fzf-maps-x)$/;"	m
<Leader>a&	layers/+vim/text-align/config.vim	/^  nmap <Leader>a&     :Tabularize \/&<CR>$/;"	m
<Leader>a&	layers/+vim/text-align/config.vim	/^  vmap <Leader>a&     :Tabularize \/&<CR>$/;"	m
<Leader>a,	layers/+vim/text-align/config.vim	/^  nmap <Leader>a,     :Tabularize \/,<CR>$/;"	m
<Leader>a,	layers/+vim/text-align/config.vim	/^  vmap <Leader>a,     :Tabularize \/,<CR>$/;"	m
<Leader>a,,	layers/+vim/text-align/config.vim	/^  nmap <Leader>a,,    :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a,,	layers/+vim/text-align/config.vim	/^  vmap <Leader>a,,    :Tabularize \/,\\zs<CR>$/;"	m
<Leader>a:	layers/+vim/text-align/config.vim	/^  nmap <Leader>a:     :Tabularize \/:<CR>$/;"	m
<Leader>a:	layers/+vim/text-align/config.vim	/^  vmap <Leader>a:     :Tabularize \/:<CR>$/;"	m
<Leader>a::	layers/+vim/text-align/config.vim	/^  nmap <Leader>a::    :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a::	layers/+vim/text-align/config.vim	/^  vmap <Leader>a::    :Tabularize \/:\\zs<CR>$/;"	m
<Leader>a<Bar>	layers/+vim/text-align/config.vim	/^  nmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a<Bar>	layers/+vim/text-align/config.vim	/^  vmap <Leader>a<Bar> :Tabularize \/<Bar><CR>$/;"	m
<Leader>a=	layers/+vim/text-align/config.vim	/^  nmap <Leader>a=     :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=	layers/+vim/text-align/config.vim	/^  vmap <Leader>a=     :Tabularize \/^[^=]*\\zs=<CR>$/;"	m
<Leader>a=>	layers/+vim/text-align/config.vim	/^  nmap <Leader>a=>    :Tabularize \/=><CR>$/;"	m
<Leader>a=>	layers/+vim/text-align/config.vim	/^  vmap <Leader>a=>    :Tabularize \/=><CR>$/;"	m
<Leader>b?	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>b? :Buffers<CR>$/;"	m
<Leader>bb	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>bb :Buffers<CR>$/;"	m
<Leader>bh	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <silent><Leader>bh :Startify<CR>$/;"	m
<Leader>f?	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>f? :Files ~<CR>$/;"	m
<Leader>f?	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>f? :Files<CR>$/;"	m
<Leader>fR	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>fR :source $MYVIMRC<CR>$/;"	m
<Leader>fd	layers/+tools/file-manager/config.vim	/^  nnoremap <silent> <Leader>fd :NERDTreeFind<CR>$/;"	m
<Leader>fep	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>fep :Files ~\/MEGA\/code\/dotfiles<CR>$/;"	m
<Leader>ff	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>ff :Files $PWD\/<CR>$/;"	m
<Leader>ft	layers/+tools/file-manager/config.vim	/^  nnoremap <silent> <Leader>ft :NERDTreeToggle<CR>$/;"	m
<Leader>gb	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gb :Gblame<CR>$/;"	m
<Leader>gc	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gc :Gcommit<CR>$/;"	m
<Leader>gd	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gd :Gdiff<CR>$/;"	m
<Leader>gg	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gg :SignifyToggle<CR>$/;"	m
<Leader>gp	layers/+version-control/git/config.vim	/^  nnoremap <Leader>gp :Gpush<cr>$/;"	m
<Leader>gs	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gs :Gstatus<CR>$/;"	m
<Leader>gw	layers/+version-control/git/config.vim	/^  nnoremap <silent> <Leader>gw :Gwrite<cr>$/;"	m
<Leader>gy	layers/+fun/goyo/config.vim	/^  nnoremap <Leader>gy :Goyo<CR>$/;"	m
<Leader>jJ	layers/+vim/better-motion/config.vim	/^nmap <Leader>jJ <Plug>(easymotion-overwin-f2)$/;"	m
<Leader>jb	layers/+vim/better-motion/config.vim	/^map <Leader>jb  <Plug>(easymotion-prefix)F$/;"	m
<Leader>jf	layers/+vim/better-motion/config.vim	/^map <Leader>jf  <Plug>(easymotion-prefix)w$/;"	m
<Leader>jj	layers/+vim/better-motion/config.vim	/^map  <Leader>jj <Plug>(easymotion-bd-f)$/;"	m
<Leader>jj	layers/+vim/better-motion/config.vim	/^nmap <Leader>jj <Plug>(easymotion-overwin-f)$/;"	m
<Leader>jl	layers/+vim/better-motion/config.vim	/^map <Leader>jl <Plug>(easymotion-bd-jk)$/;"	m
<Leader>jl	layers/+vim/better-motion/config.vim	/^nmap <Leader>jl <Plug>(easymotion-overwin-line)$/;"	m
<Leader>jw	layers/+vim/better-motion/config.vim	/^map  <Leader>jw <Plug>(easymotion-bd-w)$/;"	m
<Leader>jw	layers/+vim/better-motion/config.vim	/^nmap <Leader>jw <Plug>(easymotion-overwin-w)$/;"	m
<Leader>sf	layers/+tools/fzf/config.vim	/^  nnoremap <silent> <Leader>sf :call spacevim#plug#fzf#Session()<CR>$/;"	m
<Leader>tC	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>tC :call spacevim#util#ToggleColorColumn()<CR>$/;"	m
<Leader>tc	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>tc :call spacevim#util#ToggleCursorColumn()<CR>$/;"	m
<Leader>ti	layers/+programming/programming/config.vim	/^  noremap <silent> <Leader>ti :IndentLinesToggle<cr>$/;"	m
<Leader>tt	layers/+programming/moe-tagbar/config.vim	/^nnoremap <Leader>tt :TagbarToggle<CR>$/;"	m
<Leader>vc	layers/+tools/tmux/config.vim	/^nnoremap <silent> <Leader>vc :VimuxCloseRunner<cr>$/;"	m
<Leader>vr	layers/+tools/tmux/config.vim	/^nnoremap <silent> <Leader>vr :call spacevim#plug#vimux#VimuxCompileRun()<cr>$/;"	m
<Leader>vs	layers/+tools/tmux/config.vim	/^nnoremap <silent> <Leader>vs :VimuxInterruptRunner<CR>$/;"	m
<Leader>w?	layers/+tools/fzf/config.vim	/^  nnoremap <Leader>w? :Windows<CR>$/;"	m
<Leader>ww	layers/+distributions/better-defaults/keybindings.vim	/^nmap <Leader>ww <Plug>(choosewin)$/;"	m
<Leader>xa	layers/+vim/text-align/config.vim	/^  nmap <Leader>xa <Plug>(EasyAlign)$/;"	m
<Leader>xa	layers/+vim/text-align/config.vim	/^  xmap <Leader>xa <Plug>(EasyAlign)$/;"	m
<Leader>xd	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Leader>xd :StripWhitespace<CR>$/;"	m
<Leader>yd	layers/+tools/tools-better/config.vim	/^  nmap <silent> <Leader>yd <Plug>DictWSearch$/;"	m
<Leader>yd	layers/+tools/tools-better/config.vim	/^  vnoremap <silent> <Leader>yd :call Space_Dict_Search()<cr>$/;"	m
<LocalLeader>1	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>1 m`yypVr=``$/;"	m
<LocalLeader>2	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>2 m`yypVr-``$/;"	m
<LocalLeader>3	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>3 m`^i### <esc>``4l$/;"	m
<LocalLeader>4	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>4 m`^i#### <esc>``5l$/;"	m
<LocalLeader>5	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>5 m`^i##### <esc>``6l$/;"	m
<LocalLeader>b	core/ftplugin/go.vim	/^nmap <buffer> <LocalLeader>b  :<C-U>call spacevim#lang#go#BuildGoFiles()<CR>$/;"	m
<LocalLeader>c	core/ftplugin/dot.vim	/^nnoremap <buffer> <LocalLeader>c :update<CR>:GraphvizCompile<CR><CR>$/;"	m
<LocalLeader>cp	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>cp :MarkdownPreview<cr>$/;"	m
<LocalLeader>cs	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>cs :Toc<cr>$/;"	m
<LocalLeader>ct	core/ftplugin/markdown.vim	/^nnoremap <buffer> <LocalLeader>ct :silent GenTocGFM<cr>$/;"	m
<LocalLeader>gh	core/ftplugin/vim.vim	/^nnoremap <buffer> <LocalLeader>gh :<C-U>call spacevim#util#OpenPluginHomepage()<CR>$/;"	m
<LocalLeader>i	core/ftplugin/go.vim	/^nmap <buffer> <LocalLeader>i  :GoImports<CR>$/;"	m
<LocalLeader>r	core/ftplugin/go.vim	/^nmap <buffer> <LocalLeader>r  <Plug>(go-run)$/;"	m
<LocalLeader>s	core/ftplugin/dot.vim	/^nnoremap <buffer> <LocalLeader>s :update<CR>:GraphvizShow<CR><CR>$/;"	m
<LocalLeader>t	core/ftplugin/go.vim	/^nmap <buffer> <LocalLeader>t  <Plug>(go-test)$/;"	m
<LocalLeader>ta	core/ftplugin/markdown.vim	/^  nnoremap <buffer> <LocalLeader>ta :Tabularize \/<Bar><CR>$/;"	m
<M-Tab>	layers/+distributions/better-defaults/keybindings.vim	/^imap   <M-Tab>  <C-O>:tabprev<CR>$/;"	m
<M-Tab>	layers/+distributions/better-defaults/keybindings.vim	/^map    <M-Tab>  :tabprev<CR>$/;"	m
<M-c>	layers/+tools/lspc/config.vim	/^nnoremap <silent> <M-c> :pc<CR>$/;"	m
<Plug>(window_2)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_2) <C-W>v$/;"	m
<Plug>(window_H)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_H) <C-W>5<$/;"	m
<Plug>(window_J)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_J) :resize +5<CR>$/;"	m
<Plug>(window_K)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_K) :resize -5<CR>$/;"	m
<Plug>(window_L)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_L) <C-W>5>$/;"	m
<Plug>(window_b)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_b) <C-W>=$/;"	m
<Plug>(window_d)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_d) <C-W>c$/;"	m
<Plug>(window_h)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_h) <C-W>h$/;"	m
<Plug>(window_j)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_j) <C-W>j$/;"	m
<Plug>(window_k)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_k) <C-W>k$/;"	m
<Plug>(window_l)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_l) <C-W>l$/;"	m
<Plug>(window_q)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_q) <C-W>q$/;"	m
<Plug>(window_r)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_r) <C-W>r$/;"	m
<Plug>(window_s1)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_s1) <C-W>s$/;"	m
<Plug>(window_s2)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_s2) <C-W>s$/;"	m
<Plug>(window_v1)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_v1) <C-W>v$/;"	m
<Plug>(window_v2)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_v2) <C-W>v$/;"	m
<Plug>(window_w)	core/autoload/spacevim/plug/leaderGuide.vim	/^nnoremap <Plug>(window_w) <C-W>w$/;"	m
<S-TAB>	layers/+programming/codesnippets/config.vim	/^  smap <S-TAB> <Esc>:call UltiSnips#JumpBackwards()<CR>$/;"	m
<S-Tab>	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <S-Tab> :bp<CR>$/;"	m
<TAB>	layers/+programming/codesnippets/config.vim	/^  smap <TAB>   <Esc>:call UltiSnips#JumpForwards()<CR>$/;"	m
<Tab>	layers/+distributions/better-defaults/keybindings.vim	/^nnoremap <Tab> :bn<CR>$/;"	m
<c-b>	layers/+tools/tools-better/config.vim	/^  nnoremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>$/;"	m
<c-f>	layers/+tools/tools-better/config.vim	/^  nnoremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>$/;"	m
<down>	layers/+completion/autocomplete/config.vim	/^  inoremap <expr> <down> pumvisible() ? "\\<C-n>" : "\\<down>"$/;"	m
<leader>	layers/+vim/which-key/config.vim	/^nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>$/;"	m
<leader>	layers/+vim/which-key/config.vim	/^vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>$/;"	m
<leader><Down>	layers/+programming/self-map/config.vim	/^nnoremap <leader><Down> <C-w>j$/;"	m
<leader><Left>	layers/+programming/self-map/config.vim	/^nnoremap <leader><Left> <C-w>h$/;"	m
<leader><Right>	layers/+programming/self-map/config.vim	/^nnoremap <leader><Right> <C-w>l$/;"	m
<leader><Up>	layers/+programming/self-map/config.vim	/^nnoremap <leader><Up> <C-w>k$/;"	m
<leader><leader>z	layers/+tools/lspc/config.vim	/^nnoremap <silent> <leader><leader>z :pc<CR>$/;"	m
<leader>ag	layers/+tools/fzf/config.vim	/^  nnoremap <leader>ag :PCAg<CR>$/;"	m
<leader>ag	layers/+tools/fzf/config.vim	/^  vnoremap <leader>ag :<c-u>call spacevim#plug#fzf#ag_vsearch()<cr>$/;"	m
<leader>ap	layers/+programming/self-map/config.vim	/^nmap <leader>ap :call system("xclip -i -selection clipboard", expand("%:p"))<CR>$/;"	m
<leader>bD	layers/+tools/tools-better/config.vim	/^  nnoremap <leader>bD :BufOnly<cr>$/;"	m
<leader>bd	layers/+programming/programming/config.vim	/^  nnoremap <silent> <leader>bd :CorrectCloseBuffer<cr>$/;"	m
<leader>cb	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>cb :%y+<cr>$/;"	m
<leader>cd	layers/+tools/tools-better/config.vim	/^    noremap <leader>cd :call CreateDirectory()<cr>$/;"	m
<leader>cn	layers/+tools/lspc/config.vim	/^nnoremap <silent> <leader>cn :call LanguageClient#textDocument_rename()<CR>$/;"	m
<leader>cp	layers/+programming/self-map/config.vim	/^nmap <leader>cp :call system("xclip -i -selection clipboard", expand("%:t"))<CR>$/;"	m
<leader>ct	layers/+tools/fzf/config.vim	/^  nnoremap <silent> <leader>ct :Tags<cr>$/;"	m
<leader>da	layers/+programming/self-map/config.vim	/^noremap <silent> <leader>da ggdG$/;"	m
<leader>df	layers/+programming/self-map/config.vim	/^noremap <silent> <leader>df :call DeleteFileAndCloseBuffer()<cr>$/;"	m
<leader>fS	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>fS :wa!<cr>$/;"	m
<leader>fb	layers/+tools/fzf/config.vim	/^  nnoremap <silent> <leader>fb :BTags<cr>$/;"	m
<leader>fed	layers/+programming/self-map/config.vim	/^noremap <silent> <leader>fed :edit ~\/.spacevim<cr>$/;"	m
<leader>fl	layers/+tools/fzf/config.vim	/^  nnoremap <silent> <leader>fl :BLines<cr>$/;"	m
<leader>fr	layers/+tools/tools-better/config.vim	/^  noremap <silent> <leader>fr :FilesMru<cr>$/;"	m
<leader>ft	layers/+tools/ranger/config.vim	/^nnoremap <silent> <leader>ft :RangerWorkingDirectory<cr> $/;"	m
<leader>gT	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>gT :call spacevim#vim#auto#AddTitle()<cr>$/;"	m
<leader>ga	layers/+version-control/git/config.vim	/^  nnoremap <leader>ga :Git! add .<cr>:bd!<cr>$/;"	m
<leader>gh	layers/+version-control/git/config.vim	/^  nnoremap <leader>gh :SignifyToggleHighlight<CR>$/;"	m
<leader>go	layers/+tools/tools-better/config.vim	/^	nmap <leader>go <Plug>(openbrowser-smart-search)$/;"	m
<leader>go	layers/+tools/tools-better/config.vim	/^	vmap <leader>go <Plug>(openbrowser-smart-search)$/;"	m
<leader>gr	layers/+version-control/git/config.vim	/^  nnoremap <silent> <leader>gr :SignifyRefresh<CR>$/;"	m
<leader>gv	layers/+version-control/git/config.vim	/^  noremap <silent> <leader>gv :Agit<cr>$/;"	m
<leader>gx	layers/+tools/tools-better/config.vim	/^	vmap <silent> <leader>gx <Plug>(openbrowser-open)$/;"	m
<leader>gx	layers/+tools/tools-better/config.vim	/^  nmap <silent> <leader>gx <Plug>(openbrowser-open)$/;"	m
<leader>gz	layers/+tools/tools-better/config.vim	/^  nmap <silent> <leader>gz <Plug>Zeavim$/;"	m
<leader>gz	layers/+tools/tools-better/config.vim	/^  vmap <leader>gz <Plug>ZVVisSelection$/;"	m
<leader>itb	layers/+tools/tools-better/config.vim	/^  noremap <leader>itb :Tableize<cr>$/;"	m
<leader>ls	layers/+tools/fzf/config.vim	/^  nnoremap <silent> <leader>ls :Lines<cr>$/;"	m
<leader>nb	layers/+programming/self-map/config.vim	/^nmap <leader>nb :edit $PWD\/$/;"	m
<leader>nc	layers/+tools/file-manager/config.vim	/^  noremap <silent> <leader>nc :NERDTreeCWD<cr>$/;"	m
<leader>nc	layers/+tools/ranger/config.vim	/^nnoremap <silent> <leader>nc :Ranger<cr> $/;"	m
<leader>nf	layers/+programming/self-map/config.vim	/^nmap <leader>nf :call AddNewFile()<cr>$/;"	m
<leader>pc	layers/+programming/self-map/config.vim	/^nmap <leader>pc :call system("xclip -i -selection clipboard", expand("%:p:h"))<CR>$/;"	m
<leader>pr	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>pr :PlugClean<cr>$/;"	m
<leader>pu	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>pu :PlugUpdate!<cr>$/;"	m
<leader>rg	layers/+tools/fzf/config.vim	/^  nnoremap <leader>rg :PCRg!<cr>$/;"	m
<leader>rg	layers/+tools/fzf/config.vim	/^  vnoremap <leader>rg :<c-u>call spacevim#plug#fzf#RgVisual()<cr>$/;"	m
<leader>rn	layers/+tools/tools-better/config.vim	/^    noremap <leader>rn :call GiveFileNewName()<cr>$/;"	m
<leader>rp	layers/+programming/self-map/config.vim	/^nmap <leader>rp :call system("xclip -i -selection clipboard", expand("%"))<CR>$/;"	m
<leader>sr	layers/+distributions/better-defaults/config.vim	/^noremap <silent> <leader>sr :SLoad<cr>$/;"	m
<leader>sv	layers/+distributions/better-defaults/config.vim	/^noremap <silent> <leader>sv :SSave<cr>$/;"	m
<leader>wf	layers/+programming/self-map/config.vim	/^nnoremap <silent> <leader>wf :ZoomToggle<CR>$/;"	m
<localleader>	layers/+vim/which-key/config.vim	/^nnoremap <localleader> :<c-u>LeaderGuide  ','<CR>$/;"	m
<localleader>	layers/+vim/which-key/config.vim	/^vnoremap <localleader> :<c-u>LeaderGuideVisual  ','<CR>$/;"	m
<localleader>=	layers/+programming/codeformat/config.vim	/^nnoremap <localleader>= :Neoformat<cr>$/;"	m
<localleader>BD	layers/+programming/self-map/config.vim	/^nnoremap <silent> <localleader>BD :bd!<cr>$/;"	m
<localleader>ag	layers/+tools/fzf/config.vim	/^  nnoremap <localleader>ag :Ag!<CR>$/;"	m
<localleader>cas	layers/+tools/tools-better/config.vim	/^  noremap <silent> <localleader>cas :ChangeAroundSurrounding<cr>$/;"	m
<localleader>cd	layers/+tools/tools-better/config.vim	/^  noremap <silent> <localleader>cd :Codi!!<cr>$/;"	m
<localleader>ci	layers/+tools/tools-better/config.vim	/^  noremap <silent> <localleader>ci :ChangeInsideSurrounding<cr>$/;"	m
<localleader>df	layers/+tools/tools-better/config.vim	/^  vmap <localleader>df :Linediff<cr>$/;"	m
<localleader>dr	layers/+tools/tools-better/config.vim	/^  vmap <localleader>dr :LinediffReset<cr>$/;"	m
<localleader>fd	layers/+programming/editing/config.vim	/^  nnoremap <silent> <localleader>fd :Fardo<cr>$/;"	m
<localleader>ls	layers/+tools/tools-better/config.vim	/^  nmap <localleader>ls :LinediffShow<cr>$/;"	m
<localleader>qs	layers/+programming/editing/config.vim	/^  nmap <localleader>qs <plug>(QuickScopeToggle)$/;"	m
<localleader>qs	layers/+programming/editing/config.vim	/^  xmap <localleader>qs <plug>(QuickScopeToggle)$/;"	m
<localleader>rg	layers/+tools/fzf/config.vim	/^  nnoremap <localleader>rg :Rg!<cr>$/;"	m
<localleader>sr	layers/+tools/lspc/config.vim	/^nnoremap <localleader>sr :LanguageClientStop<cr>:sleep 1000m<cr>:LanguageClientStart<cr>$/;"	m
<localleader>ww	layers/+programming/self-map/config.vim	/^nnoremap <localleader>ww <C-W>w$/;"	m
<nop>	layers/+tools/tools-better/config.vim	/^  nnoremap <silent> <nop> <Plug>DictSearch$/;"	m
<nop>	layers/+tools/tools-better/config.vim	/^  vnoremap <silent> <nop> <Plug>DictVSearch$/;"	m
<s-tab>	layers/+programming/codesnippets/config.vim	/^  inoremap <expr> <s-tab> pumvisible() ? "<C-p>" : "<C-R>=STabJumpBack()<CR>"$/;"	m
<s-tab>	layers/+programming/self-map/config.vim	/^nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR/;"	m
<tab>	layers/+programming/codesnippets/config.vim	/^  inoremap <expr> <tab> pumvisible() ? "<C-n>" : "<C-R>=TabJumpNext()<CR>"$/;"	m
<tab>	layers/+programming/self-map/config.vim	/^nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR/;"	m
<up>	layers/+completion/autocomplete/config.vim	/^  inoremap <expr> <up> pumvisible() ? "\\<C-p>" : "\\<up>"$/;"	m
APP	Makefile	/^APP           := space-vim$/;"	m
Add a snippet	layers/+tools/tmux/README.md	/^### Add a snippet$/;"	S
AddNewFile	layers/+programming/self-map/config.vim	/^function! AddNewFile()$/;"	f
Ag	core/autoload/spacevim/plug/fzf.vim	/^command! -bang -nargs=* Ag$/;"	c
Airline layer	layers/+themes/airline/README.md	/^# Airline layer$/;"	c
Auto-Completion layer	layers/+completion/autocomplete/README.md	/^# Auto-Completion layer$/;"	c
Auto-completion	layers/+lang/python/README.md	/^#### Auto-completion$/;"	t
Basic	layers/+distributions/better-defaults/README.md	/^### Basic$/;"	S
Better-defaults layer	layers/+distributions/better-defaults/README.md	/^# Better-defaults layer$/;"	c
Better-motion layer	layers/+vim/better-motion/README.md	/^# Better-motion layer$/;"	c
Bigger	layers/+distributions/better-defaults/config.vim	/^  command! Bigger  :let &guifont = substitute(&guifont, '\\d\\+$', '\\=submatch(0)+1', '')$/;"	c
Buffer	layers/+distributions/better-defaults/README.md	/^### Buffer$/;"	S
BuildComposer	layers/+lang/markdown/packages.vim	/^function! BuildComposer(info)$/;"	f
C-C++ layer	layers/+lang/c-c++/README.md	/^# C-C++ layer$/;"	c
Chinese layer	layers/+misc/chinese/README.md	/^# Chinese layer$/;"	c
Clojure layer	layers/+lang/clojure/README.md	/^# Clojure layer$/;"	c
Comment	layers/+programming/editing/README.md	/^### Comment$/;"	S
CorrectCloseBuffer	layers/+programming/programming/config.vim	/^  command! CorrectCloseBuffer call s:CorrectCloseBuffer()$/;"	c
CreateDirectory	layers/+tools/tools-better/config.vim	/^  function! CreateDirectory()$/;"	f
DOT_SPACEVIM	Makefile	/^DOT_SPACEVIM  := ~\/.spacevim$/;"	m
DeleteFileAndCloseBuffer	layers/+programming/self-map/config.vim	/^function! DeleteFileAndCloseBuffer()$/;"	f
Dependencies	layers/+lang/python/README.md	/^### Dependencies$/;"	S
Description	layers/+completion/autocomplete/README.md	/^## Description$/;"	s
Description	layers/+distributions/better-defaults/README.md	/^## Description$/;"	s
Description	layers/+fun/emoji/README.md	/^## Description$/;"	s
Description	layers/+fun/games/README.md	/^## Description$/;"	s
Description	layers/+fun/goyo/README.md	/^## Description$/;"	s
Description	layers/+lang/c-c++/README.md	/^## Description$/;"	s
Description	layers/+lang/clojure/README.md	/^## Description$/;"	s
Description	layers/+lang/elixir/README.md	/^## Description$/;"	s
Description	layers/+lang/elm/README.md	/^## Description$/;"	s
Description	layers/+lang/erlang/README.md	/^## Description$/;"	s
Description	layers/+lang/go/README.md	/^## Description$/;"	s
Description	layers/+lang/graphviz/README.md	/^## Description$/;"	s
Description	layers/+lang/html/README.md	/^## Description$/;"	s
Description	layers/+lang/javascript/README.md	/^## Description$/;"	s
Description	layers/+lang/latex/README.md	/^## Description$/;"	s
Description	layers/+lang/markdown/README.md	/^## Description$/;"	s
Description	layers/+lang/python/README.md	/^## Description$/;"	s
Description	layers/+lang/ruby/README.md	/^## Description$/;"	s
Description	layers/+lang/scala/README.md	/^## Description$/;"	s
Description	layers/+lang/solidity/README.md	/^## Description$/;"	s
Description	layers/+lang/typescript/README.md	/^## Description$/;"	s
Description	layers/+lang/vue/README.md	/^## Description$/;"	s
Description	layers/+misc/chinese/README.md	/^## Description$/;"	s
Description	layers/+programming/codeformat/README.md	/^## Description$/;"	s
Description	layers/+programming/codesnippets/README.md	/^## Description$/;"	s
Description	layers/+programming/editing/README.md	/^## Description$/;"	s
Description	layers/+programming/programming/README.md	/^## Description$/;"	s
Description	layers/+themes/airline/README.md	/^## Description$/;"	s
Description	layers/+themes/lightline/README.md	/^## Description$/;"	s
Description	layers/+tools/docker/README.md	/^## Description$/;"	s
Description	layers/+tools/file-manager/README.md	/^## Description$/;"	s
Description	layers/+tools/fzf/README.md	/^## Description$/;"	s
Description	layers/+tools/tmux/README.md	/^## Description$/;"	s
Description	layers/+version-control/git/README.md	/^## Description$/;"	s
Description	layers/+version-control/github/README.md	/^## Description$/;"	s
Description	layers/+vim/better-motion/README.md	/^## Description$/;"	s
Description	layers/+vim/text-align/README.md	/^## Description$/;"	s
Description	layers/+vim/which-key/README.md	/^## Description$/;"	s
Docker layer	layers/+tools/docker/README.md	/^# Docker layer$/;"	c
EOF	install.sh	/^  cat << EOF$/;"	h
Elixir layer	layers/+lang/elixir/README.md	/^# Elixir layer$/;"	c
Elm Layer	layers/+lang/elm/README.md	/^# Elm Layer$/;"	c
Emoji layer	layers/+fun/emoji/README.md	/^# Emoji layer$/;"	c
Emoji layer	layers/+fun/goyo/README.md	/^# Emoji layer$/;"	c
Erlang layer	layers/+lang/erlang/README.md	/^# Erlang layer$/;"	c
ExpandSnippetOrCarriageReturn	layers/+programming/codesnippets/config.vim	/^  function! ExpandSnippetOrCarriageReturn()$/;"	f
Files	core/autoload/spacevim/plug/fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Formatting layer	layers/+programming/codeformat/README.md	/^# Formatting layer$/;"	c
Games layer	layers/+fun/games/README.md	/^# Games layer$/;"	c
Git layer	layers/+version-control/git/README.md	/^# Git layer$/;"	c
GitHub layer	layers/+version-control/github/README.md	/^# GitHub layer$/;"	c
GiveFileNewName	layers/+tools/tools-better/config.vim	/^  function! GiveFileNewName()$/;"	f
Go layer	layers/+lang/go/README.md	/^# Go layer$/;"	c
Graphviz layer	layers/+lang/graphviz/README.md	/^# Graphviz layer$/;"	c
HTML layer	layers/+lang/html/README.md	/^# HTML layer$/;"	c
How to get all buffer name lists ? How to match special buffer by match string ?	question.md	/^### How to get all buffer name lists ? How to match special buffer by match string ? $/;"	S
INIT_SPACEVIM	Makefile	/^INIT_SPACEVIM := ~\/.space-vim\/init.spacevim$/;"	m
INIT_VIM	Makefile	/^INIT_VIM      := ~\/.space-vim\/init.vim$/;"	m
Install	layers/+completion/autocomplete/README.md	/^## Install$/;"	s
Install	layers/+distributions/better-defaults/README.md	/^## Install$/;"	s
Install	layers/+fun/emoji/README.md	/^## Install$/;"	s
Install	layers/+fun/games/README.md	/^## Install$/;"	s
Install	layers/+fun/goyo/README.md	/^## Install$/;"	s
Install	layers/+lang/c-c++/README.md	/^## Install$/;"	s
Install	layers/+lang/clojure/README.md	/^## Install$/;"	s
Install	layers/+lang/elixir/README.md	/^## Install$/;"	s
Install	layers/+lang/elm/README.md	/^## Install$/;"	s
Install	layers/+lang/erlang/README.md	/^## Install$/;"	s
Install	layers/+lang/go/README.md	/^## Install$/;"	s
Install	layers/+lang/graphviz/README.md	/^## Install$/;"	s
Install	layers/+lang/html/README.md	/^## Install$/;"	s
Install	layers/+lang/javascript/README.md	/^## Install$/;"	s
Install	layers/+lang/latex/README.md	/^## Install$/;"	s
Install	layers/+lang/markdown/README.md	/^## Install$/;"	s
Install	layers/+lang/python/README.md	/^## Install$/;"	s
Install	layers/+lang/ruby/README.md	/^## Install$/;"	s
Install	layers/+lang/scala/README.md	/^## Install$/;"	s
Install	layers/+lang/solidity/README.md	/^## Install$/;"	s
Install	layers/+lang/typescript/README.md	/^## Install$/;"	s
Install	layers/+lang/vue/README.md	/^## Install$/;"	s
Install	layers/+misc/chinese/README.md	/^## Install$/;"	s
Install	layers/+programming/codeformat/README.md	/^## Install$/;"	s
Install	layers/+programming/codesnippets/README.md	/^## Install$/;"	s
Install	layers/+programming/editing/README.md	/^## Install$/;"	s
Install	layers/+programming/programming/README.md	/^## Install$/;"	s
Install	layers/+themes/airline/README.md	/^## Install$/;"	s
Install	layers/+themes/lightline/README.md	/^## Install$/;"	s
Install	layers/+tools/docker/README.md	/^## Install$/;"	s
Install	layers/+tools/file-manager/README.md	/^## Install$/;"	s
Install	layers/+tools/fzf/README.md	/^## Install$/;"	s
Install	layers/+tools/tmux/README.md	/^## Install$/;"	s
Install	layers/+version-control/git/README.md	/^## Install$/;"	s
Install	layers/+version-control/github/README.md	/^## Install$/;"	s
Install	layers/+vim/better-motion/README.md	/^## Install$/;"	s
Install	layers/+vim/text-align/README.md	/^## Install$/;"	s
Install	layers/+vim/which-key/README.md	/^## Install$/;"	s
JavaScript layer	layers/+lang/javascript/README.md	/^# JavaScript layer$/;"	c
K	layers/+tools/lspc/config.vim	/^nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>$/;"	m
Key Bindings	layers/+distributions/better-defaults/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+fun/games/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+fun/goyo/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/c-c++/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/clojure/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/elm/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/go/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/graphviz/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/html/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/latex/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/markdown/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/python/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/ruby/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+lang/vue/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+programming/codeformat/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+programming/programming/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+tools/file-manager/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+tools/fzf/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+tools/tmux/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+version-control/git/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+version-control/github/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+vim/better-motion/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+vim/text-align/README.md	/^## Key Bindings$/;"	s
Key Bindings	layers/+vim/which-key/README.md	/^## Key Bindings$/;"	s
LaTeX layer	layers/+lang/latex/README.md	/^# LaTeX layer$/;"	c
LanguageClient_config	layers/+tools/lspc/config.vim	/^augroup LanguageClient_config$/;"	a
Layer	core/autoload/spacevim.vim	/^  command! -nargs=+ -bar Layer       call s:layer(<args>)$/;"	c
Layer	layers/+lang/python/README.md	/^### Layer$/;"	S
Layer	layers/+lang/vue/README.md	/^### Layer$/;"	S
Layer Manifest	layers/LAYERS.md	/^Layer Manifest$/;"	c
LayerCache	core/autoload/spacevim.vim	/^  command! -nargs=0 -bar LayerCache  call spacevim#cache#init()$/;"	c
LayerStatus	core/autoload/spacevim.vim	/^  command! -nargs=0 -bar LayerStatus call spacevim#layer#status()$/;"	c
Lightline layer	layers/+themes/lightline/README.md	/^# Lightline layer$/;"	c
MP	core/autoload/spacevim.vim	/^  command! -nargs=+ -bar MP          call s:my_plugin(<args>)$/;"	c
Markdown layer	layers/+lang/markdown/README.md	/^# Markdown layer$/;"	c
Multiple_cursors_after	layers/+completion/autocomplete/config.vim	/^  function! g:Multiple_cursors_after()$/;"	f
Multiple_cursors_before	layers/+completion/autocomplete/config.vim	/^  function! g:Multiple_cursors_before()$/;"	f
NERDTreeAutoCenter	layers/+tools/file-manager/config.vim	/^  let NERDTreeAutoCenter=1$/;"	v
NERDTreeChDirMode	layers/+tools/file-manager/config.vim	/^  let NERDTreeChDirMode=0$/;"	v
NERDTreeIgnore	layers/+tools/file-manager/config.vim	/^  let NERDTreeIgnore=['\\.pyc','\\~$','\\.swp']  " 忽略一下文件的显示$/;"	v
NERDTreeShowBookmarks	layers/+tools/file-manager/config.vim	/^  let NERDTreeShowBookmarks=1 " 显示书签列表$/;"	v
NERDTreeShowHidden	layers/+tools/file-manager/config.vim	/^  let NERDTreeShowHidden=1  " 是否显示隐藏文件$/;"	v
NERDTreeShowLineNumbers	layers/+tools/file-manager/config.vim	/^  let NERDTreeShowLineNumbers=1 " 显示行号$/;"	v
NERDTreeWinSize	layers/+tools/file-manager/config.vim	/^  let NERDTreeWinSize=31  " 设置宽度$/;"	v
NVIMRC	Makefile	/^NVIMRC        := ~\/.config\/nvim\/init.vim$/;"	m
Others	layers/+distributions/better-defaults/README.md	/^### Others$/;"	S
PCAg	core/autoload/spacevim/plug/fzf.vim	/^command! -bang -nargs=* PCAg$/;"	c
PCRg	core/autoload/spacevim/plug/fzf.vim	/^command! -bang -nargs=* PCRg$/;"	c
Private	private/README.md	/^Private$/;"	c
Programming layer	layers/+programming/programming/README.md	/^# Programming layer$/;"	c
Python layer	layers/+lang/python/README.md	/^# Python layer$/;"	c
Rag	core/autoload/spacevim/plug/fzf.vim	/^command! -nargs=* Rag$/;"	c
Related Projects	layers/+completion/autocomplete/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+distributions/better-defaults/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+lang/c-c++/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+lang/latex/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+programming/codeformat/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+programming/editing/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+tools/file-manager/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+version-control/git/README.md	/^## Related Projects$/;"	s
Related Projects	layers/+vim/better-motion/README.md	/^## Related Projects$/;"	s
Related projects	layers/+programming/codesnippets/README.md	/^## Related projects$/;"	s
Related projects	layers/+vim/which-key/README.md	/^## Related projects$/;"	s
Rg	core/autoload/spacevim/plug/fzf.vim	/^command! -bang -nargs=* Rg$/;"	c
Rtp	layers/+distributions/better-defaults/keybindings.vim	/^command! -bar -nargs=0 Rtp :call spacevim#util#Runtimepath()$/;"	c
Ruby layer	layers/+lang/ruby/README.md	/^# Ruby layer$/;"	c
S	layers/+vim/better-motion/config.vim	/^nmap S <Plug>Sneak_S$/;"	m
STabJumpBack	layers/+programming/codesnippets/config.vim	/^  function! STabJumpBack()$/;"	f
Scala layer	layers/+lang/scala/README.md	/^# Scala layer$/;"	c
See: https://github.com/christoomey/vim-tmux-navigator	layers/+tools/tmux/README.md	/^# See: https:\/\/github.com\/christoomey\/vim-tmux-navigator$/;"	c
Smaller	layers/+distributions/better-defaults/config.vim	/^  command! Smaller :let &guifont = substitute(&guifont, '\\d\\+$', '\\=submatch(0)-1', '')$/;"	c
Smart pane switching with awareness of Vim splits.	layers/+tools/tmux/README.md	/^# Smart pane switching with awareness of Vim splits.$/;"	c
Solidity layer	layers/+lang/solidity/README.md	/^# Solidity layer$/;"	c
Space_Dict_Search	layers/+tools/tools-better/config.vim	/^  function! Space_Dict_Search()$/;"	f
Syntax checking	layers/+lang/python/README.md	/^#### Syntax checking$/;"	t
TPM	layers/+tools/tmux/README.md	/^### TPM$/;"	S
TabJumpNext	layers/+programming/codesnippets/config.vim	/^  function! TabJumpNext()$/;"	f
Table of Contents	layers/+completion/autocomplete/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+distributions/better-defaults/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+fun/emoji/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+fun/games/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+fun/goyo/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/c-c++/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/clojure/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/elixir/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/elm/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/erlang/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/go/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/graphviz/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/html/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/javascript/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/latex/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/markdown/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/python/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/ruby/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/scala/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/solidity/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/typescript/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+lang/vue/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+misc/chinese/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+programming/codeformat/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+programming/codesnippets/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+programming/editing/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+programming/programming/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+themes/airline/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+themes/lightline/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+tools/docker/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+tools/file-manager/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+tools/fzf/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+tools/tmux/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+version-control/git/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+version-control/github/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+vim/better-motion/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+vim/text-align/README.md	/^## Table of Contents$/;"	s
Table of Contents	layers/+vim/which-key/README.md	/^## Table of Contents$/;"	s
Text-Align layer	layers/+vim/text-align/README.md	/^# Text-Align layer$/;"	c
Tips	layers/+programming/programming/README.md	/^## Tips$/;"	s
TypeScript layer	layers/+lang/typescript/README.md	/^# TypeScript layer$/;"	c
Usage	layers/+fun/emoji/README.md	/^## Usage$/;"	s
VIMRC	Makefile	/^VIMRC         := ~\/.vimrc$/;"	m
Vue layer	layers/+lang/vue/README.md	/^# Vue layer$/;"	c
Which-Key layer	layers/+vim/which-key/README.md	/^# Which-Key layer$/;"	c
Window	layers/+distributions/better-defaults/README.md	/^### Window$/;"	S
ZoomToggle	layers/+programming/self-map/config.vim	/^command! ZoomToggle call s:ZoomToggle()$/;"	c
[<space>	layers/+programming/self-map/config.vim	/^nnoremap <silent> [<space> :pu! _<cr>:']+1<cr>$/;"	m
[p	layers/+programming/self-map/config.vim	/^nnoremap <silent> [p :pu!<cr>$/;"	m
]<space>	layers/+programming/self-map/config.vim	/^nnoremap <silent> ]<space> :pu _<cr>:'[-1<cr>$/;"	m
]p	layers/+programming/self-map/config.vim	/^nnoremap <silent> ]p :pu<cr>$/;"	m
b:did_spacevim_c_ftplugin	core/ftplugin/c.vim	/^let b:did_spacevim_c_ftplugin = 1$/;"	v
b:did_spacevim_cpp_ftplugin	core/ftplugin/cpp.vim	/^let b:did_spacevim_cpp_ftplugin = 1$/;"	v
b:did_spacevim_css_ftplugin	core/ftplugin/css.vim	/^let b:did_spacevim_css_ftplugin = 1$/;"	v
b:did_spacevim_dot_ftplugin	core/ftplugin/dot.vim	/^let b:did_spacevim_dot_ftplugin = 1$/;"	v
b:did_spacevim_go_ftplugin	core/ftplugin/go.vim	/^let b:did_spacevim_go_ftplugin = 1$/;"	v
b:did_spacevim_html_ftplugin	core/ftplugin/html.vim	/^let b:did_spacevim_html_ftplugin = 1$/;"	v
b:did_spacevim_js_ftplugin	core/ftplugin/javascript.vim	/^let b:did_spacevim_js_ftplugin = 1$/;"	v
b:did_spacevim_md_ftplugin	core/ftplugin/markdown.vim	/^let b:did_spacevim_md_ftplugin = 1$/;"	v
b:did_spacevim_php_ftplugin	core/ftplugin/php.vim	/^let b:did_spacevim_php_ftplugin = 1$/;"	v
b:did_spacevim_py_ftplugin	core/ftplugin/python.vim	/^let b:did_spacevim_py_ftplugin = 1$/;"	v
b:did_spacevim_rs_ftplugin	core/ftplugin/rust.vim	/^let b:did_spacevim_rs_ftplugin = 1$/;"	v
b:did_spacevim_ruby_ftplugin	core/ftplugin/ruby.vim	/^let b:did_spacevim_ruby_ftplugin = 1$/;"	v
b:did_spacevim_sh_ftplugin	core/ftplugin/sh.vim	/^let b:did_spacevim_sh_ftplugin = 1$/;"	v
b:did_spacevim_tex_ftplugin	core/ftplugin/tex.vim	/^let b:did_spacevim_tex_ftplugin = 1$/;"	v
b:did_spacevim_typescript_ftplugin	core/ftplugin/typescript.vim	/^let b:did_spacevim_typescript_ftplugin = 1$/;"	v
b:did_spacevim_vim_ftplugin	core/ftplugin/vim.vim	/^let b:did_spacevim_vim_ftplugin = 1$/;"	v
b:did_spacevim_vue_ftplugin	core/ftplugin/vue.vim	/^let b:did_spacevim_vue_ftplugin = 1$/;"	v
backup	install	/^backup() {$/;"	f
backup	install.sh	/^backup() {$/;"	f
checkPlug	core/autoload/spacevim.vim	/^    augroup checkPlug$/;"	a
check_git	install	/^check_git() {$/;"	f
check_git	install.sh	/^check_git() {$/;"	f
code-snippets layer	layers/+programming/codesnippets/README.md	/^# code-snippets layer$/;"	c
confirm	uninstall.sh	/^confirm() {$/;"	f
editing layer	layers/+programming/editing/README.md	/^# editing layer$/;"	c
erlang_show_errors	layers/+lang/erlang/config.vim	/^let erlang_show_errors = 0$/;"	v
error	install	/^error() {$/;"	f
error	install.sh	/^error() {$/;"	f
exists	install	/^exists() {$/;"	f
exists	install.sh	/^exists() {$/;"	f
f	layers/layers.py	/^f = open(os.path.expandvars('.\/LAYERS.md'), 'w')$/;"	v
file-manager layer	layers/+tools/file-manager/README.md	/^# file-manager layer$/;"	c
fzf layer	layers/+tools/fzf/README.md	/^# fzf layer$/;"	c
g:LanguageClient_autoStart	layers/+tools/lspc/config.vim	/^let g:LanguageClient_autoStart = 1$/;"	v
g:LanguageClient_completionPreferTextEdit	layers/+tools/lspc/config.vim	/^let g:LanguageClient_completionPreferTextEdit=1$/;"	v
g:LanguageClient_diagnosticsEnable	layers/+tools/lspc/config.vim	/^let g:LanguageClient_diagnosticsEnable=0$/;"	v
g:LanguageClient_loadSettings	layers/+tools/lspc/config.vim	/^let g:LanguageClient_loadSettings = 1$/;"	v
g:LanguageClient_loggingLevel	layers/+tools/lspc/config.vim	/^let g:LanguageClient_loggingLevel = 'DEBUG'$/;"	v
g:LanguageClient_serverCommands	layers/+tools/lspc/config.vim	/^let g:LanguageClient_serverCommands = {$/;"	v
g:NERDSpaceDelims	layers/+programming/editing/config.vim	/^  let g:NERDSpaceDelims=1$/;"	v
g:NERDTreeAutoDeleteBuffer	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeAutoDeleteBuffer=1$/;"	v
g:NERDTreeDirArrowCollapsible	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeDirArrowCollapsible = "~"$/;"	v
g:NERDTreeDirArrowExpandable	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeDirArrowExpandable = "\\u276f"$/;"	v
g:NERDTreeExactMatchHighlightColor	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExactMatchHighlightColor = g:spacevim#plug#nerdtree#ExactMatchHighlightColor " t/;"	v
g:NERDTreeExtensionHighlightColor	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeExtensionHighlightColor = g:spacevim#plug#nerdtree#ExtensionHighlightColor " thi/;"	v
g:NERDTreeIgnore	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeIgnore = g:spacevim#plug#nerdtree#ignore$/;"	v
g:NERDTreeIndicatorMapCustom	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeIndicatorMapCustom = g:spacevim#plug#nerdtree#IndicatorMapCustom$/;"	v
g:NERDTreeShowHidden	layers/+tools/file-manager/config.vim	/^  let g:NERDTreeShowHidden=1$/;"	v
g:Powerline_symbols	layers/+themes/airline/config.vim	/^  let g:Powerline_symbols='fancy'$/;"	v
g:UltiSnipsExpandTrigger	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsExpandTrigger = "<C-z>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsJumpBackwardTrigger = '<C-k>'$/;"	v
g:UltiSnipsJumpForwardTrigger	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsJumpForwardTrigger = '<C-j>'$/;"	v
g:UltiSnipsRemoveSelectModeMappings	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsRemoveSelectModeMappings = 0$/;"	v
g:UltiSnipsSnippetDirectories	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsSnippetDirectories=['UltiSnips']$/;"	v
g:UltiSnipsSnippetsDir	layers/+programming/codesnippets/config.vim	/^    let g:UltiSnipsSnippetsDir =  '~\/.config\/nvim\/UltiSnips'$/;"	v
g:UltiSnipsSnippetsDir	layers/+programming/codesnippets/config.vim	/^    let g:UltiSnipsSnippetsDir = '~\/.vim\/UltiSnips'$/;"	v
g:UltiSnipsUsePythonVersion	layers/+programming/codesnippets/config.vim	/^  let g:UltiSnipsUsePythonVersion = 3$/;"	v
g:VimuxHeight	layers/+tools/tmux/config.vim	/^let g:VimuxHeight = "40"$/;"	v
g:VimuxOrientation	layers/+tools/tmux/config.vim	/^let g:VimuxOrientation = "h"$/;"	v
g:airline#extensions#ale#error_symbol	layers/+themes/airline/config.vim	/^  let g:airline#extensions#ale#error_symbol = '•'$/;"	v
g:airline#extensions#ale#warning_symbol	layers/+themes/airline/config.vim	/^  let g:airline#extensions#ale#warning_symbol = '•'$/;"	v
g:airline#extensions#branch#enabled	layers/+themes/airline/config.vim	/^  let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline#extensions#default#layout	layers/+themes/airline/config.vim	/^  let g:airline#extensions#default#layout = [$/;"	v
g:airline#extensions#default#section_truncate_width	layers/+themes/airline/config.vim	/^  let g:airline#extensions#default#section_truncate_width = {$/;"	v
g:airline#extensions#tabline#buffer_idx_mode	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_idx_mode = 1$/;"	v
g:airline#extensions#tabline#buffer_nr_format	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_nr_format = '%s:'$/;"	v
g:airline#extensions#tabline#buffer_nr_show	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#buffer_nr_show = 1$/;"	v
g:airline#extensions#tabline#enabled	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#enabled=1$/;"	v
g:airline#extensions#tabline#fnamecollapse	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnamecollapse = 1$/;"	v
g:airline#extensions#tabline#fnamemod	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnamemod = ':t'$/;"	v
g:airline#extensions#tabline#fnametruncate	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#fnametruncate = 0$/;"	v
g:airline#extensions#tabline#formatter	layers/+themes/airline/config.vim	/^  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'$/;"	v
g:airline_theme	layers/+themes/airline/config.vim	/^  let g:airline_theme='violet'$/;"	v
g:ale_echo_msg_error_str	layers/+checkers/moe-check/config.vim	/^let g:ale_echo_msg_error_str =  '✖︎ Error' $/;"	v
g:ale_echo_msg_format	layers/+checkers/moe-check/config.vim	/^let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'$/;"	v
g:ale_echo_msg_warning_str	layers/+checkers/moe-check/config.vim	/^let g:ale_echo_msg_warning_str = '⚠ Warning'$/;"	v
g:ale_linters	layers/+checkers/moe-check/config.vim	/^let g:ale_linters={$/;"	v
g:ale_python_flake8_options	layers/+checkers/moe-check/config.vim	/^let g:ale_python_flake8_options = '--ignore=W,E501,E231,E225,E741,E116,E3,E226'         " python$/;"	v
g:ale_set_highlights	layers/+checkers/moe-check/config.vim	/^let g:ale_set_highlights = 0$/;"	v
g:ale_set_loclist	layers/+checkers/moe-check/config.vim	/^let g:ale_set_loclist = 1$/;"	v
g:ale_sign_error	layers/+checkers/moe-check/config.vim	/^let g:ale_sign_error = '✖︎'$/;"	v
g:ale_sign_warning	layers/+checkers/moe-check/config.vim	/^let g:ale_sign_warning = '⚠'$/;"	v
g:ale_statusline_format	layers/+checkers/moe-check/config.vim	/^let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']$/;"	v
g:api_key	layers/+tools/tools-better/config.vim	/^  let g:api_key = "1932136763"$/;"	v
g:auto_refresh_delay	layers/+completion/autocomplete/config.vim	/^  let g:auto_refresh_delay=0$/;"	v
g:auto_save	layers/+tools/tools-better/packages.vim	/^  let g:auto_save = 1$/;"	v
g:auto_save_events	layers/+tools/tools-better/packages.vim	/^  let g:auto_save_events=["InsertLeave","TextChanged","QuitPre"]$/;"	v
g:auto_save_write_all_buffers	layers/+tools/tools-better/packages.vim	/^  let g:auto_save_write_all_buffers=1$/;"	v
g:autosave_timer	layers/+tools/tools-better/packages.vim	/^  let g:autosave_timer=5000$/;"	v
g:c_no_curly_error	layers/+lang/c-c++/config.vim	/^  let g:c_no_curly_error=1$/;"	v
g:choosewin_overlay_enable	layers/+distributions/better-defaults/config.vim	/^let g:choosewin_overlay_enable = 1$/;"	v
g:cpp_class_scope_highlight	layers/+lang/c-c++/config.vim	/^  let g:cpp_class_scope_highlight = 1$/;"	v
g:deoplete#auto_complete_delay	layers/+completion/autocomplete/config.vim	/^  let g:deoplete#auto_complete_delay=0$/;"	v
g:deoplete#enable_at_startup	layers/+completion/autocomplete/config.vim	/^  let g:deoplete#enable_at_startup = 0$/;"	v
g:deoplete#sources#clang#clang_header	private/config.vim	/^let  g:deoplete#sources#clang#clang_header='\/usr\/lib\/clang'$/;"	v
g:deoplete#sources#clang#libclang_path	private/config.vim	/^let g:deoplete#sources#clang#libclang_path='\/usr\/lib\/libclang.so'   "zchee\/deoplete-clang$/;"	v
g:deoplete#sources#go#cgo#libclang_path	private/config.vim	/^let g:deoplete#sources#go#cgo#libclang_path ='\/usr\/lib\/libclang.so'$/;"	v
g:deoplete#sources#go#gocode_binary	private/config.vim	/^let g:deoplete#sources#go#gocode_binary = $GOPATH.'\/bin\/gocode'         " zchee\/deoplete-go$/;"	v
g:deoplete#sources#go#package_dot	private/config.vim	/^let g:deoplete#sources#go#package_dot = 1$/;"	v
g:deoplete#sources#go#sort_class	private/config.vim	/^let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']$/;"	v
g:deoplete#sources#jedi#debug_server	private/config.vim	/^let g:deoplete#sources#jedi#debug_server=1$/;"	v
g:deoplete#sources#jedi#python_path	private/config.vim	/^let g:deoplete#sources#jedi#python_path='\/usr\/bin\/python3'  "zchee\/deoplete-jedi$/;"	v
g:deoplete#sources#jedi#server_timeout	private/config.vim	/^let g:deoplete#sources#jedi#server_timeout=10$/;"	v
g:deoplete#sources#rust#documentation_max_height	private/config.vim	/^let g:deoplete#sources#rust#documentation_max_height=30$/;"	v
g:deoplete#sources#rust#racer_binary	private/config.vim	/^let g:deoplete#sources#rust#racer_binary='\/home\/pittcat\/.cargo\/bin\/racer'          "sebasti/;"	v
g:deoplete#sources#rust#rust_source_path	private/config.vim	/^let g:deoplete#sources#rust#rust_source_path='\/home\/pittcat\/.rustup\/toolchains\/stable-x86_6/;"	v
g:deoplete#sources#ternjs#filetypes	private/config.vim	/^let g:deoplete#sources#ternjs#filetypes = [$/;"	v
g:deoplete#sources#ternjs#tern_bin	private/config.vim	/^let g:deoplete#sources#ternjs#tern_bin = '\/usr\/bin\/tern'    " carlitux\/deoplete-ternjs$/;"	v
g:echodoc_enable_at_startup	layers/+programming/editing/config.vim	/^	let g:echodoc_enable_at_startup = 1$/;"	v
g:elm_format_autosave	layers/+lang/elm/config.vim	/^  let g:elm_format_autosave = 1$/;"	v
g:fzf_colors	layers/+tools/fzf/config.vim	/^  let g:fzf_colors = g:spacevim#plug#fzf#colors$/;"	v
g:fzf_layout	core/autoload/spacevim/plug/fzf.vim	/^let g:fzf_layout = { 'down': '~40%'  }$/;"	v
g:go_highlight_build_constraints	layers/+lang/go/config.vim	/^  let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_fields	layers/+lang/go/config.vim	/^  let g:go_highlight_fields = 1$/;"	v
g:go_highlight_functions	layers/+lang/go/config.vim	/^  let g:go_highlight_functions = 1$/;"	v
g:go_highlight_methods	layers/+lang/go/config.vim	/^  let g:go_highlight_methods = 1$/;"	v
g:go_highlight_operators	layers/+lang/go/config.vim	/^  let g:go_highlight_operators = 1$/;"	v
g:go_highlight_types	layers/+lang/go/config.vim	/^  let g:go_highlight_types = 1$/;"	v
g:gutentags_cache_dir	layers/+tools/tools-better/config.vim	/^  let g:gutentags_cache_dir = s:vim_tags$/;"	v
g:gutentags_ctags_extra_args	layers/+tools/tools-better/config.vim	/^  let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']$/;"	v
g:gutentags_ctags_extra_args	layers/+tools/tools-better/config.vim	/^  let g:gutentags_ctags_extra_args += ['--c-kinds=+px']$/;"	v
g:gutentags_ctags_extra_args	layers/+tools/tools-better/config.vim	/^  let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']$/;"	v
g:gutentags_ctags_tagfile	layers/+tools/tools-better/config.vim	/^  let g:gutentags_ctags_tagfile = 'tags'$/;"	v
g:gutentags_project_root	layers/+tools/tools-better/config.vim	/^  let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']$/;"	v
g:highlightedyank_highlight_duration	layers/+tools/tools-better/config.vim	/^  let g:highlightedyank_highlight_duration = 1000$/;"	v
g:html5_event_handler_attributes_complete	layers/+lang/html/config.vim	/^  let g:html5_event_handler_attributes_complete = 0$/;"	v
g:indentLine_char	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_char = '┆'$/;"	v
g:indentLine_char	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_char='¦'$/;"	v
g:indentLine_color_gui	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_color_gui = '#4A9586'$/;"	v
g:indentLine_color_term	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_color_term=239$/;"	v
g:indentLine_concealcursor	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_concealcursor='vc'      " default 'inc'$/;"	v
g:indentLine_enabled	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_enabled=1$/;"	v
g:indentLine_fileTypeExclude	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_fileTypeExclude = ['help', 'startify', 'vimfiler']$/;"	v
g:indentLine_setColors	core/autoload/spacevim/autocmd/indent.vim	/^  let g:indentLine_setColors = 1$/;"	v
g:javascript_plugin_jsdoc	layers/+lang/javascript/config.vim	/^  let g:javascript_plugin_jsdoc = 1       $/;"	v
g:jsx_ext_required	layers/+lang/javascript/config.vim	/^  let g:jsx_ext_required = 1$/;"	v
g:keyfrom	layers/+tools/tools-better/config.vim	/^  let g:keyfrom = "aioiyuuko"$/;"	v
g:layers_sum	core/autoload/spacevim/layer.vim	/^  let g:layers_sum = len(g:spacevim)$/;"	v
g:lightline	layers/+themes/lightline/config.vim	/^  let g:lightline = {$/;"	v
g:limelight_conceal_ctermfg	layers/+fun/goyo/config.vim	/^  let g:limelight_conceal_ctermfg='gray'$/;"	v
g:limelight_conceal_ctermfg	layers/+fun/goyo/config.vim	/^  let g:limelight_conceal_ctermfg=240$/;"	v
g:limelight_default_coefficient	layers/+fun/goyo/config.vim	/^  let g:limelight_default_coefficient=0.7$/;"	v
g:livepreview_previewer	layers/+lang/latex/config.vim	/^  let g:livepreview_previewer = g:spacevim#plug#latex#Previewer$/;"	v
g:llmap	layers/+vim/which-key/config.vim	/^let g:llmap = {}$/;"	v
g:loaded_table_mode	layers/+tools/tools-better/config.vim	/^  let g:loaded_table_mode = 1$/;"	v
g:mapleader	core/autoload/spacevim.vim	/^    let g:mapleader = get(g:, 'spacevim_leader', "\\<Space>")$/;"	v
g:maplocalleader	core/autoload/spacevim.vim	/^    let g:maplocalleader = get(g:, 'spacevim_localleader', ',')$/;"	v
g:mdip_imgdir	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:mdip_imgdir = 'img'$/;"	v
g:mdip_imgname	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:mdip_imgname = 'image'$/;"	v
g:min_pattern_length	layers/+completion/autocomplete/config.vim	/^  let g:min_pattern_length=2$/;"	v
g:multi_cursor_next_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_next_key='<C-d>'$/;"	v
g:multi_cursor_prev_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_prev_key='<C-u>'$/;"	v
g:multi_cursor_quit_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_quit_key='<Esc>'$/;"	v
g:multi_cursor_select_all_word_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_select_all_word_key='<A-a>'$/;"	v
g:multi_cursor_skip_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_skip_key='<C-x>'$/;"	v
g:multi_cursor_start_word_key	layers/+programming/editing/config.vim	/^let g:multi_cursor_start_word_key='<C-d>'$/;"	v
g:multi_cursor_use_default_mapping	layers/+programming/editing/config.vim	/^let g:multi_cursor_use_default_mapping=0$/;"	v
g:mundo_preview_height	layers/+tools/tools-better/packages.vim	/^  let g:mundo_preview_height = 20$/;"	v
g:mundo_width	layers/+tools/tools-better/packages.vim	/^  let g:mundo_width = 40$/;"	v
g:neoformat_enabled_c	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_c = ['clang-format']$/;"	v
g:neoformat_enabled_cpp	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_cpp = ['clang-format']$/;"	v
g:neoformat_enabled_css	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_css = ['prettier']$/;"	v
g:neoformat_enabled_graphql	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_graphql = ['prettier']$/;"	v
g:neoformat_enabled_html	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_html = ['prettydiff']$/;"	v
g:neoformat_enabled_java	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_java = ['uncrustify']$/;"	v
g:neoformat_enabled_javascript	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_javascript = ['prettier']$/;"	v
g:neoformat_enabled_json	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_json = ['prettier']$/;"	v
g:neoformat_enabled_less	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_less= ['prettier']$/;"	v
g:neoformat_enabled_markdown	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_markdown = ['prettier']$/;"	v
g:neoformat_enabled_python	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_python = ['yapf']$/;"	v
g:neoformat_enabled_ruby	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_ruby = ['rubocop']$/;"	v
g:neoformat_enabled_rust	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_rust = ['rustfmt']$/;"	v
g:neoformat_enabled_scss	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_scss = ['prettier']$/;"	v
g:neoformat_enabled_vue	layers/+programming/codeformat/config.vim	/^let g:neoformat_enabled_vue = ['prettier']$/;"	v
g:neoformat_only_msg_on_error	layers/+programming/codeformat/config.vim	/^let g:neoformat_only_msg_on_error = 0$/;"	v
g:neoformat_try_formatprg	layers/+programming/codeformat/config.vim	/^let g:neoformat_try_formatprg = 1$/;"	v
g:nerdtree_tabs_open_on_console_startup	layers/+tools/file-manager/config.vim	/^  let g:nerdtree_tabs_open_on_console_startup=1 " 在终端启动vim时，共享NERDTree$/;"	v
g:netrw_nogx	layers/+tools/tools-better/config.vim	/^  let g:netrw_nogx = 1 " disable netrw's gx mapping.$/;"	v
g:no_plugin_maps	layers/+tools/ranger/config.vim	/^let g:no_plugin_maps =  v:true$/;"	v
g:nvim_typescript#server_path	private/config.vim	/^let g:nvim_typescript#server_path='\/usr\/bin\/tsserver'       " mhartington\/nvim-typescript$/;"	v
g:paste_easy_message	layers/+tools/tools-better/config.vim	/^  let g:paste_easy_message=0$/;"	v
g:python3_host_prog	private/config.vim	/^let g:python3_host_prog = '\/usr\/bin\/python3'$/;"	v
g:python3_host_skip_check	private/config.vim	/^let g:python3_host_skip_check=1$/;"	v
g:python_host_prog	private/config.vim	/^let g:python_host_prog = '\/usr\/bin\/python'$/;"	v
g:python_host_skip_check	private/config.vim	/^let g:python_host_skip_check=1$/;"	v
g:qs_highlight_on_keys	layers/+programming/editing/config.vim	/^  let g:qs_highlight_on_keys = ['t', 'T']$/;"	v
g:rainbow_active	layers/+programming/programming/config.vim	/^  let g:rainbow_active = 1$/;"	v
g:rainbow_conf	layers/+programming/programming/config.vim	/^  let g:rainbow_conf = g:spacevim#plug#rainbow#conf$/;"	v
g:ranger_map_keys	layers/+tools/ranger/config.vim	/^let g:ranger_map_keys = 0$/;"	v
g:rooter_change_directory_for_non_project_files	layers/+programming/programming/config.vim	/^  let g:rooter_change_directory_for_non_project_files = ''$/;"	v
g:rooter_silent_chdir	layers/+programming/programming/config.vim	/^  let g:rooter_silent_chdir = 1$/;"	v
g:scala_scaladoc_indent	layers/+lang/scala/config.vim	/^  let g:scala_scaladoc_indent = 1$/;"	v
g:screen_size_by_vim_instance	layers/+distributions/spacevim/config.vim	/^    let g:screen_size_by_vim_instance = get(g:, 'screen_size_by_vim_instance', 1)$/;"	v
g:screen_size_restore_pos	layers/+distributions/spacevim/config.vim	/^    let g:screen_size_restore_pos = get(g:, 'screen_size_restore_pos', 1)$/;"	v
g:signify_cursorhold_insert	layers/+version-control/git/config.vim	/^  let g:signify_cursorhold_insert     = 1$/;"	v
g:signify_cursorhold_normal	layers/+version-control/git/config.vim	/^  let g:signify_cursorhold_normal     = 1$/;"	v
g:signify_update_on_bufenter	layers/+version-control/git/config.vim	/^  let g:signify_update_on_bufenter    = 0$/;"	v
g:signify_update_on_focusgained	layers/+version-control/git/config.vim	/^  let g:signify_update_on_focusgained = 1$/;"	v
g:signify_vcs_list	layers/+version-control/git/config.vim	/^  let g:signify_vcs_list              = [ 'git', 'hg' ]$/;"	v
g:smartpairs_key	layers/+tools/tools-better/config.vim	/^  let g:smartpairs_key = 'v'$/;"	v
g:smartpairs_nextpairs_key	layers/+tools/tools-better/config.vim	/^  let g:smartpairs_nextpairs_key = 'v'$/;"	v
g:smartpairs_nextpairs_key_a	layers/+tools/tools-better/config.vim	/^  let g:smartpairs_nextpairs_key_a = '<C-m>'$/;"	v
g:smartpairs_nextpairs_key_i	layers/+tools/tools-better/config.vim	/^  let g:smartpairs_nextpairs_key_i = 'v'$/;"	v
g:smartpairs_revert_key	layers/+tools/tools-better/config.vim	/^  let g:smartpairs_revert_key = '<C-s>'$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.excluded = []$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.gui = has('gui_running')$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.info = g:spacevim.base. '\/core\/autoload\/spacevim\/info.vim'$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.layers_base = '\/layers'$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.loaded = ['spacevim'] " Enable spacevim layer by default$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.nvim = has('nvim') && exists('*jobwait')$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.plugins = []$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.private_base = '\/private'$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.timer = exists('*timer_start')$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.tmux = !empty($TMUX)$/;"	v
g:spacevim	core/autoload/spacevim.vim	/^let g:spacevim.vim8 = exists('*job_start')$/;"	v
g:spacevim	core/autoload/spacevim/cache.vim	/^      let g:spacevim.manifest[l:l_k] = {'dir': l:layer}$/;"	v
g:spacevim	core/autoload/spacevim/cache.vim	/^    let g:spacevim.private = map(l:private_path, 'fnamemodify(v:val, ":t")')$/;"	v
g:spacevim	core/autoload/spacevim/cache.vim	/^  let g:spacevim.manifest = {}$/;"	v
g:spacevim	core/autoload/spacevim/cache.vim	/^  let g:spacevim.topics = l:topic2layers$/;"	v
g:spacevim	core/autoload/spacevim/info.vim	/^let g:spacevim.manifest = {'codesnippets': {'dir': '\/home\/pittcat\/.space-vim\/layers\/+progra/;"	v
g:spacevim	core/autoload/spacevim/info.vim	/^let g:spacevim.topics = {'+completion': ['autocomplete'], '+tools': ['tmux', 'file-manager', 'ls/;"	v
g:spacevim	init.vim	/^let g:spacevim = get(g:, 'spacevim', {})$/;"	v
g:spacevim	init.vim	/^let g:spacevim.base = $HOME.'\/.space-vim'$/;"	v
g:spacevim	init.vim	/^let g:spacevim.os = {}$/;"	v
g:spacevim	init.vim	/^let g:spacevim.os.linux = has('unix') && !has('macunix')$/;"	v
g:spacevim	init.vim	/^let g:spacevim.os.mac = has('macunix')$/;"	v
g:spacevim	init.vim	/^let g:spacevim.version = '0.8.0'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols = {}$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.branch = '⎇'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.linenr = '¶'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.linenr = '␊'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.linenr = '␤'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.paste = 'Þ'$/;"	v
g:spacevim#plug#airline#symbols	core/autoload/spacevim/plug/airline.vim	/^let g:spacevim#plug#airline#symbols.whitespace = 'Ξ'$/;"	v
g:spacevim#plug#fzf#colors	core/autoload/spacevim/plug/fzf.vim	/^let g:spacevim#plug#fzf#colors = {$/;"	v
g:spacevim#plug#latex#Previewer	core/autoload/spacevim/plug/latex.vim	/^    let g:spacevim#plug#latex#Previewer = 'evince'$/;"	v
g:spacevim#plug#latex#Previewer	core/autoload/spacevim/plug/latex.vim	/^    let g:spacevim#plug#latex#Previewer = 'open -a texshop'$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^    let g:spacevim#plug#leaderGuide#lmap[s:i] = [ s:i.'wincmd w', 'windows '.s:i ]$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap =  {}$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap[' '] = [ 'call feedkeys("\\<Plug>easymotion-prefix")', 'eas/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap[';'] = [ 'call feedkeys("\\<Plug>NERDCommenterComment")','C/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['?'] = [ 'Maps', 'show keybindings' ]$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['Q'] = [ 'qa!', 'quit-without-saving' ]$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['a'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['b'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['e'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['f'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['g'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['h'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['j'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['p'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['q'] = [ 'q', 'quit' ]$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['s'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['t'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['w'] = {$/;"	v
g:spacevim#plug#leaderGuide#lmap	core/autoload/spacevim/plug/leaderGuide.vim	/^let g:spacevim#plug#leaderGuide#lmap['x'] = {$/;"	v
g:spacevim#plug#rainbow#conf	core/autoload/spacevim/plug/rainbow.vim	/^let g:spacevim#plug#rainbow#conf = {$/;"	v
g:startify_change_to_vcs_root	core/autoload/spacevim/autocmd/startify.vim	/^  let g:startify_change_to_vcs_root = 1$/;"	v
g:startify_change_to_vcs_root	layers/+distributions/better-defaults/config.vim	/^let g:startify_change_to_vcs_root = 1$/;"	v
g:startify_custom_header	core/autoload/spacevim/autocmd/startify.vim	/^  let g:startify_custom_header = s:custom_header$/;"	v
g:startify_custom_header	layers/+distributions/better-defaults/config.vim	/^let g:startify_custom_header = g:spacevim#plug#startify#header$/;"	v
g:startify_list_order	core/autoload/spacevim/autocmd/startify.vim	/^  let g:startify_list_order = s:list_order$/;"	v
g:startify_list_order	layers/+distributions/better-defaults/config.vim	/^let g:startify_list_order = g:spacevim#plug#startify#list_order$/;"	v
g:startify_session_persistence	layers/+distributions/better-defaults/config.vim	/^let g:startify_session_persistence = 1$/;"	v
g:table_mode_corner	layers/+tools/tools-better/config.vim	/^  let g:table_mode_corner = '|'$/;"	v
g:table_mode_delimiter	layers/+tools/tools-better/config.vim	/^  let g:table_mode_delimiter = ' '$/;"	v
g:tagbar_autofocus	layers/+programming/moe-tagbar/config.vim	/^let g:tagbar_autofocus = 1$/;"	v
g:tagbar_sort	layers/+programming/moe-tagbar/config.vim	/^let g:tagbar_sort = 0$/;"	v
g:tagbar_type_markdown	layers/+programming/moe-tagbar/config.vim	/^let g:tagbar_type_markdown = {$/;"	v
g:tagbar_type_ruby	layers/+programming/moe-tagbar/config.vim	/^  let g:tagbar_type_ruby = {$/;"	v
g:tagbar_type_typescript	layers/+programming/moe-tagbar/config.vim	/^let g:tagbar_type_typescript = {$/;"	v
g:tex_conceal	layers/+lang/latex/config.vim	/^let g:tex_conceal = ''$/;"	v
g:tmuxcomplete#trigger	private/config.vim	/^let g:tmuxcomplete#trigger = ''     "  'wellle\/tmux-complete.vim'$/;"	v
g:ulti_expand_res	layers/+programming/codesnippets/config.vim	/^  let g:ulti_expand_res = 0$/;"	v
g:user_emmet_leader_key	layers/+lang/html/config.vim	/^  let g:user_emmet_leader_key='<C-E>'$/;"	v
g:user_emmet_mode	layers/+lang/html/config.vim	/^  let g:user_emmet_mode = 'a'$/;"	v
g:user_emmet_settings	layers/+lang/html/config.vim	/^  let g:user_emmet_settings = {$/;"	v
g:vim_markdown_conceal	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vim_markdown_conceal = 0$/;"	v
g:vim_markdown_frontmatter	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vim_markdown_frontmatter = 1$/;"	v
g:vim_markdown_math	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vim_markdown_math = 1$/;"	v
g:vim_markdown_math	layers/+lang/latex/config.vim	/^let g:vim_markdown_math = 1$/;"	v
g:vim_markdown_toc_autofit	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vim_markdown_toc_autofit = 1$/;"	v
g:vmt_auto_update_on_save	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vmt_auto_update_on_save = 1$/;"	v
g:vmt_dont_insert_fence	core/autoload/spacevim/autocmd/markdown.vim	/^  let g:vmt_dont_insert_fence = 0$/;"	v
g:zv_disable_mapping	layers/+tools/tools-better/config.vim	/^  let g:zv_disable_mapping = 1$/;"	v
g:zv_file_types	layers/+tools/tools-better/config.vim	/^  let g:zv_file_types = {$/;"	v
g:zv_get_docset_by	layers/+tools/tools-better/config.vim	/^  let g:zv_get_docset_by = ['ft']$/;"	v
gd	layers/+tools/lspc/config.vim	/^nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>$/;"	m
generate_dot_spacevim	install	/^generate_dot_spacevim() {$/;"	f
generate_dot_spacevim	install.sh	/^generate_dot_spacevim() {$/;"	f
gi	core/ftplugin/go.vim	/^nmap <buffer> gi <Plug>(go-implements)$/;"	m
gvd	layers/+tools/lspc/config.vim	/^nnoremap <silent> gvd :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>$/;"	m
help	Makefile	/^help:$/;"	t
help	install.sh	/^help() {$/;"	f
infer	install.sh	/^infer() {$/;"	f
install	install	/^install() {$/;"	f
install	install.sh	/^install() {$/;"	f
install_for_neovim	install	/^install_for_neovim() {$/;"	f
install_for_neovim	install.sh	/^install_for_neovim() {$/;"	f
install_for_vim	install	/^install_for_vim() {$/;"	f
install_for_vim	install.sh	/^install_for_vim() {$/;"	f
install_plugins	install	/^install_plugins() {$/;"	f
install_plugins	install.sh	/^install_plugins() {$/;"	f
layers	layers/layers.py	/^    layers = [$/;"	v
loadNerdtree	layers/+tools/file-manager/packages.vim	/^augroup loadNerdtree$/;"	a
loadSnips	layers/+programming/codesnippets/packages.vim	/^augroup loadSnips$/;"	a
msg	install	/^msg() {$/;"	f
msg	install.sh	/^msg() {$/;"	f
neovim	Makefile	/^neovim:$/;"	t
plugins	layers/layers.py	/^        plugins = "<ul>"$/;"	v
plugs	layers/layers.py	/^plugs = []$/;"	v
q	core/autoload/spacevim/layer.vim	/^  nnoremap <silent> <buffer> q  :bd<CR>$/;"	m
q	core/ftplugin/help.vim	/^nnoremap <buffer> q :helpclose<CR>$/;"	m
q	core/ftplugin/qf.vim	/^nnoremap <buffer> q :cclose<bar>:lclose<CR>$/;"	m
qs_colors	layers/+programming/editing/config.vim	/^  augroup qs_colors$/;"	a
rainbowLisp	layers/+programming/programming/config.vim	/^  augroup rainbowLisp$/;"	a
refresh_always	layers/+completion/autocomplete/config.vim	/^  let refresh_always=v:true$/;"	v
res	layers/layers.py	/^                    res = re.split(r"'*\/*'", line)$/;"	v
s	layers/+vim/better-motion/config.vim	/^nmap s <Plug>Sneak_s$/;"	m
s:CorrectCloseBuffer	layers/+programming/programming/config.vim	/^  function! s:CorrectCloseBuffer()$/;"	f
s:Source	core/autoload/spacevim.vim	/^function! s:Source(file, ...) abort$/;"	f
s:TYPE	core/autoload/spacevim.vim	/^let s:TYPE = {$/;"	v
s:TYPE	core/autoload/spacevim/plug/fzf.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:ZoomToggle	layers/+programming/self-map/config.vim	/^function! s:ZoomToggle() abort$/;"	f
s:action_for	core/autoload/spacevim/plug/fzf.vim	/^function! s:action_for(key, ...)$/;"	f
s:align_lists	core/autoload/spacevim/plug/fzf.vim	/^function! s:align_lists(lists)$/;"	f
s:ansi	core/autoload/spacevim/plug/fzf.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	core/autoload/spacevim/plug/fzf.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:ask	core/autoload/spacevim/vim/plug.vim	/^function! s:ask(message) abort$/;"	f
s:assign_name	core/autoload/spacevim/layer.vim	/^function! s:assign_name()$/;"	f
s:buflisted	core/autoload/spacevim/plug/fzf.vim	/^function! s:buflisted()$/;"	f
s:cache	core/autoload/spacevim.vim	/^function! s:cache() abort$/;"	f
s:check_dot_spacevim	core/autoload/spacevim.vim	/^function! s:check_dot_spacevim() abort$/;"	f
s:check_missing_plugins	core/autoload/spacevim.vim	/^function! s:check_missing_plugins() abort$/;"	f
s:check_vim_plug	core/autoload/spacevim.vim	/^function! s:check_vim_plug() abort$/;"	f
s:chomp	core/autoload/spacevim/plug/fzf.vim	/^function! s:chomp(str)$/;"	f
s:columns	core/autoload/spacevim/vim/gui.vim	/^let s:columns=&columns$/;"	v
s:command_sink	core/autoload/spacevim/plug/fzf.vim	/^function! s:command_sink(lines)$/;"	f
s:config	core/autoload/spacevim.vim	/^function! s:config() abort$/;"	f
s:csi	core/autoload/spacevim/plug/fzf.vim	/^function! s:csi(color, fg)$/;"	f
s:custom_header	core/autoload/spacevim/autocmd/startify.vim	/^let s:custom_header = [$/;"	v
s:default_action	core/autoload/spacevim/plug/fzf.vim	/^let s:default_action = {$/;"	v
s:define_command	core/autoload/spacevim.vim	/^function! s:define_command() abort$/;"	f
s:dot_spacevim	core/autoload/spacevim.vim	/^let s:dot_spacevim = $HOME.'\/.spacevim'$/;"	v
s:enter_full_screen	core/autoload/spacevim/vim/gui.vim	/^function! s:enter_full_screen()$/;"	f
s:escape	core/autoload/spacevim/plug/fzf.vim	/^function! s:escape(path)$/;"	f
s:excmds	core/autoload/spacevim/plug/fzf.vim	/^function! s:excmds()$/;"	f
s:extend_opts	core/autoload/spacevim/plug/fzf.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:filter_and_register	core/autoload/spacevim.vim	/^  function! s:filter_and_register(val) abort$/;"	f
s:format_cmd	core/autoload/spacevim/plug/fzf.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	core/autoload/spacevim/plug/fzf.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_jump	core/autoload/spacevim/plug/fzf.vim	/^function! s:format_jump(line)$/;"	f
s:function	core/autoload/spacevim/plug/fzf.vim	/^  function! s:function(name)$/;"	f
s:fzf	core/autoload/spacevim/plug/fzf.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:get_color	core/autoload/spacevim/plug/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_nvim_version	core/autoload/spacevim/autocmd/startify.vim	/^function! s:get_nvim_version()$/;"	f
s:hidden_all	core/autoload/spacevim/util.vim	/^let s:hidden_all = 0$/;"	v
s:init	core/autoload/spacevim/cache.vim	/^function! s:init()$/;"	f
s:is_win	core/autoload/spacevim/plug/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:jump_sink	core/autoload/spacevim/plug/fzf.vim	/^function! s:jump_sink(lines)$/;"	f
s:layer	core/autoload/spacevim.vim	/^function! s:layer(name, ...)$/;"	f
s:layout_keys	core/autoload/spacevim/plug/fzf.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:leave_full_screen	core/autoload/spacevim/vim/gui.vim	/^function! s:leave_full_screen()$/;"	f
s:lines	core/autoload/spacevim/vim/gui.vim	/^let s:lines=&lines$/;"	v
s:list_order	core/autoload/spacevim/autocmd/startify.vim	/^let s:list_order = [$/;"	v
s:loaded	core/autoload/spacevim/autocmd/markdown.vim	/^let s:loaded = 0$/;"	v
s:lod	core/autoload/spacevim/defer.vim	/^function! s:lod(...)$/;"	f
s:merge_opts	core/autoload/spacevim/plug/fzf.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:my_plugin	core/autoload/spacevim.vim	/^function! s:my_plugin(plugin, ...) abort$/;"	f
s:nbs	core/autoload/spacevim/plug/fzf.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:new_window	core/autoload/spacevim/layer.vim	/^function! s:new_window()$/;"	f
s:open	core/autoload/spacevim/plug/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:packages	core/autoload/spacevim.vim	/^function! s:packages() abort$/;"	f
s:parse_options	core/autoload/spacevim.vim	/^function! s:parse_options(arg)$/;"	f
s:plug_options	core/autoload/spacevim.vim	/^let s:plug_options = {}$/;"	v
s:prepend_opts	core/autoload/spacevim/plug/fzf.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:py_init	core/autoload/spacevim/cache.vim	/^function! s:py_init()$/;"	f
s:register_plugin	core/autoload/spacevim.vim	/^function! s:register_plugin() abort$/;"	f
s:screen_filename	core/autoload/spacevim/vim/gui.vim	/^function! s:screen_filename()$/;"	f
s:spacevim_buf	core/autoload/spacevim/layer.vim	/^let s:spacevim_buf = get(s:, 'spacevim_buf', -1)$/;"	v
s:spacevim_tab	core/autoload/spacevim/layer.vim	/^let s:spacevim_tab = get(s:, 'spacevim_tab', -1)$/;"	v
s:spacevim_window_exists	core/autoload/spacevim/layer.vim	/^function! s:spacevim_window_exists()$/;"	f
s:strip	core/autoload/spacevim/plug/fzf.vim	/^function! s:strip(str)$/;"	f
s:syntax	core/autoload/spacevim/layer.vim	/^function! s:syntax()$/;"	f
s:to_a	core/autoload/spacevim.vim	/^function! s:to_a(v) abort$/;"	f
s:version	core/autoload/spacevim/autocmd/startify.vim	/^let s:version = g:spacevim.nvim ? 'nvim '.s:get_nvim_version() : 'vim '.v:version$/;"	v
s:vim_tags	layers/+tools/tools-better/config.vim	/^  let s:vim_tags = expand('~\/.cache\/tags')$/;"	v
s:wide	core/autoload/spacevim/plug/fzf.vim	/^let s:wide = 120$/;"	v
s:wrap	core/autoload/spacevim/plug/fzf.vim	/^function! s:wrap(name, opts, bang)$/;"	f
spacevim#autocmd#escalt#Init	core/autoload/spacevim/autocmd/escalt.vim	/^function! spacevim#autocmd#escalt#Init()$/;"	f
spacevim#autocmd#indent#Init	core/autoload/spacevim/autocmd/indent.vim	/^function! spacevim#autocmd#indent#Init()$/;"	f
spacevim#autocmd#markdown#Init	core/autoload/spacevim/autocmd/markdown.vim	/^function! spacevim#autocmd#markdown#Init()$/;"	f
spacevim#autocmd#startify#Init	core/autoload/spacevim/autocmd/startify.vim	/^function! spacevim#autocmd#startify#Init()$/;"	f
spacevim#begin	core/autoload/spacevim.vim	/^function! spacevim#begin() abort$/;"	f
spacevim#bootstrap	core/autoload/spacevim.vim	/^function! spacevim#bootstrap() abort$/;"	f
spacevim#cache#init	core/autoload/spacevim/cache.vim	/^function! spacevim#cache#init() abort$/;"	f
spacevim#defer#airline	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#airline(timer) abort$/;"	f
spacevim#defer#ale	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#ale(timer) abort$/;"	f
spacevim#defer#awesome_tools	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#awesome_tools(timer) abort$/;"	f
spacevim#defer#clang	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#clang(timer) abort$/;"	f
spacevim#defer#copy_and_paste	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#copy_and_paste(timer) abort$/;"	f
spacevim#defer#defaults	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#defaults(timer) abort$/;"	f
spacevim#defer#filemanage	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#filemanage(timer) abort$/;"	f
spacevim#defer#fugitive	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#fugitive(timer) abort$/;"	f
spacevim#defer#fzf	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#fzf(timer) abort$/;"	f
spacevim#defer#go	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#go(timer) abort$/;"	f
spacevim#defer#html	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#html(timer) abort$/;"	f
spacevim#defer#javascript	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#javascript(timer) abort$/;"	f
spacevim#defer#lsp	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#lsp(timer) abort$/;"	f
spacevim#defer#markdown	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#markdown(timer) abort$/;"	f
spacevim#defer#motion	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#motion(timer) abort$/;"	f
spacevim#defer#operation_freestyle	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#operation_freestyle(timer) abort$/;"	f
spacevim#defer#programming	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#programming(timer) abort$/;"	f
spacevim#defer#python	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#python(timer) abort$/;"	f
spacevim#defer#ruby	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#ruby(timer) abort$/;"	f
spacevim#defer#rust	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#rust(timer) abort$/;"	f
spacevim#defer#typescript	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#typescript(timer) abort$/;"	f
spacevim#defer#vimsignify	core/autoload/spacevim/defer.vim	/^function! spacevim#defer#vimsignify(timer) abort$/;"	f
spacevim#end	core/autoload/spacevim.vim	/^function! spacevim#end() abort$/;"	f
spacevim#layer#status	core/autoload/spacevim/layer.vim	/^function! spacevim#layer#status()$/;"	f
spacevim#load	core/autoload/spacevim.vim	/^function! spacevim#load(layer) abort$/;"	f
spacevim#plug#asyncrun#CompileAndRun	core/autoload/spacevim/plug/asyncrun.vim	/^function! spacevim#plug#asyncrun#CompileAndRun()$/;"	f
spacevim#plug#fzf#FZFCmd	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#FZFCmd()$/;"	f
spacevim#plug#fzf#FindFileInProject	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#FindFileInProject()$/;"	f
spacevim#plug#fzf#Func	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Func()$/;"	f
spacevim#plug#fzf#Jumps	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Jumps(...)$/;"	f
spacevim#plug#fzf#Oldfiles	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Oldfiles()$/;"	f
spacevim#plug#fzf#Open	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Open()$/;"	f
spacevim#plug#fzf#RgVisual	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#RgVisual()$/;"	f
spacevim#plug#fzf#Rtp	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Rtp()$/;"	f
spacevim#plug#fzf#SearchCword	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#SearchCword()$/;"	f
spacevim#plug#fzf#SearchInProject	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#SearchInProject()$/;"	f
spacevim#plug#fzf#Session	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#Session()$/;"	f
spacevim#plug#fzf#ag_vsearch	core/autoload/spacevim/plug/fzf.vim	/^function! spacevim#plug#fzf#ag_vsearch()$/;"	f
spacevim#plug#vimux#VimuxCompileRun	core/autoload/spacevim/plug/vimux.vim	/^function! spacevim#plug#vimux#VimuxCompileRun()$/;"	f
spacevim#util#GotoJump	core/autoload/spacevim/util.vim	/^function! spacevim#util#GotoJump()$/;"	f
spacevim#util#HiOverLength	core/autoload/spacevim/util.vim	/^function! spacevim#util#HiOverLength(width)$/;"	f
spacevim#util#IsDir	core/autoload/spacevim/util.vim	/^function! spacevim#util#IsDir(plugin) abort$/;"	f
spacevim#util#OpenPluginHomepage	core/autoload/spacevim/util.vim	/^function! spacevim#util#OpenPluginHomepage() abort$/;"	f
spacevim#util#RootDirectory	core/autoload/spacevim/util.vim	/^function! spacevim#util#RootDirectory()$/;"	f
spacevim#util#Runtimepath	core/autoload/spacevim/util.vim	/^function! spacevim#util#Runtimepath()$/;"	f
spacevim#util#SyntaxHiGroup	core/autoload/spacevim/util.vim	/^function! spacevim#util#SyntaxHiGroup()$/;"	f
spacevim#util#ToggleColorColumn	core/autoload/spacevim/util.vim	/^function! spacevim#util#ToggleColorColumn()$/;"	f
spacevim#util#ToggleCursorColumn	core/autoload/spacevim/util.vim	/^function! spacevim#util#ToggleCursorColumn()$/;"	f
spacevim#util#ToggleHiddleAll	core/autoload/spacevim/util.vim	/^function! spacevim#util#ToggleHiddleAll()$/;"	f
spacevim#util#VisualSelection	core/autoload/spacevim/util.vim	/^function! spacevim#util#VisualSelection()$/;"	f
spacevim#util#err	core/autoload/spacevim/util.vim	/^function! spacevim#util#err(msg)$/;"	f
spacevim#util#info	core/autoload/spacevim/util.vim	/^function! spacevim#util#info(msg)$/;"	f
spacevim#util#warn	core/autoload/spacevim/util.vim	/^function! spacevim#util#warn(msg)$/;"	f
spacevim#vim#auto#AddTitle	core/autoload/spacevim/vim/auto.vim	/^function! spacevim#vim#auto#AddTitle()$/;"	f
spacevim#vim#auto#AsyncRunStart	core/autoload/spacevim/vim/auto.vim	/^function! spacevim#vim#auto#AsyncRunStart()$/;"	f
spacevim#vim#gui#ScreenRestore	core/autoload/spacevim/vim/gui.vim	/^function! spacevim#vim#gui#ScreenRestore()$/;"	f
spacevim#vim#gui#ScreenSave	core/autoload/spacevim/vim/gui.vim	/^function! spacevim#vim#gui#ScreenSave()$/;"	f
spacevim#vim#gui#ToggleFullScreen	core/autoload/spacevim/vim/gui.vim	/^function! spacevim#vim#gui#ToggleFullScreen()$/;"	f
spacevim#vim#plug#check	core/autoload/spacevim/vim/plug.vim	/^function! spacevim#vim#plug#check(...) abort$/;"	f
spacevim#vim#plug#download	core/autoload/spacevim/vim/plug.vim	/^function! spacevim#vim#plug#download(plug_path) abort$/;"	f
spacevim#vim#tab#TabLine	core/autoload/spacevim/vim/tab.vim	/^function! spacevim#vim#tab#TabLine()$/;"	f
spacevimAsyncRun	layers/+programming/programming/config.vim	/^  augroup spacevimAsyncRun$/;"	a
spacevimAutoPairs	layers/+programming/editing/packages.vim	/^augroup spacevimAutoPairs$/;"	a
spacevimBasic	layers/+distributions/spacevim/config.vim	/^augroup spacevimBasic$/;"	a
spacevimCursorline	layers/+distributions/better-defaults/config.vim	/^augroup spacevimCursorline$/;"	a
spacevimFZF	core/ftplugin/fzf.vim	/^augroup spacevimFZF$/;"	a
spacevimGUI	layers/+distributions/better-defaults/keybindings.vim	/^augroup spacevimGUI$/;"	a
spacevimLeaderGuide	core/ftplugin/leaderGuide.vim	/^augroup spacevimLeaderGuide$/;"	a
spacevimNewFile	layers/+programming/programming/config.vim	/^augroup spacevimNewFile$/;"	a
spacevimStart	layers/+distributions/better-defaults/packages.vim	/^augroup spacevimStart$/;"	a
success	install	/^success() {$/;"	f
success	install.sh	/^success() {$/;"	f
sync_repo	install	/^sync_repo() {$/;"	f
sync_repo	install.sh	/^sync_repo() {$/;"	f
tmux config	layers/+tools/tmux/README.md	/^## tmux config$/;"	s
tmux layer	layers/+tools/tmux/README.md	/^# tmux layer$/;"	c
topic_base	layers/layers.py	/^topic_base = os.path.expanduser('.\/')$/;"	v
topic_path	layers/layers.py	/^    topic_path = topic_base + '\/' + t$/;"	v
topics	layers/layers.py	/^topics = [$/;"	v
uninstall	Makefile	/^uninstall:$/;"	t
uninstall	uninstall.sh	/^uninstall() {$/;"	f
update	Makefile	/^update:$/;"	t
url_prefix	layers/layers.py	/^url_prefix = 'https:\/\/github.com\/liuchengxu\/space-vim\/tree\/master\/layers'$/;"	v
vim	Makefile	/^vim:$/;"	t
y	layers/+tools/tools-better/config.vim	/^    map y <Plug>(highlightedyank)$/;"	m
